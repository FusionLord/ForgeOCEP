buildscript {
    repositories {
        mavenLocal()

        maven {
            name = 'Forge'
            url = 'https://files.minecraftforge.net/maven'
        }

        jcenter()
        mavenCentral()
    }

    configurations {
        classpath.resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    dependencies {
        classpath group: 'com.moandjiezana.toml', name: 'toml4j', version: '0.7.2'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

import com.moandjiezana.toml.Toml

plugins {
    id 'net.minecrell.licenser' version '0.4.1'
    id 'org.ajoberstar.grgit' version '2.3.0'
}

ext {
    config = new Toml().read(project.file('config.toml'))
}

def gitVersion() {
    if (!grgit) {
        return 'GITBORK'.toString()
    }

    def raw

    try {
        raw = grgit.describe(longDescr: true)
    } catch (Exception e) {
        return 'NO-TAG'.toString()
    }

    def desc = (raw == null ? 'MAJOR.MINOR-PATCH-HASH' : raw).split('-') as List

    desc.removeAt(desc.size() - 1)

    def offset = desc.removeAt(desc.size() - 1)
    def tag = desc.join('-')

    return "${tag}.${offset}".toString()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'net.minecraftforge.gradle'

    ext {
        mod = rootProject.config.getTable(project.name)
    }

    group mod.getString('group')
    version "${rootProject.config.getString('minecraft.version')}-${gitVersion()}"

    repositories {
        mavenLocal()

        maven {
            name = 'Forge'
            url = 'https://files.minecraftforge.net/maven'
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        minecraft group: config.getString('minecraft.forge.group'), name: config.getString('minecraft.forge.name'), version: config.getString('minecraft.forge.version')

        testImplementation gradleTestKit()
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.+'

        testCompileOnly group: 'junit', name: 'junit', version: '4.12'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.+'
        testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.1.+'
    }

    test {
        useJUnitPlatform()
    }

    minecraft {
        mappings channel: config.getString('minecraft.mappings.channel'), version: config.getString('minecraft.mappings.version')
    }

    sourceSets {
        api

        main {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output

            resources {
                srcDirs += 'src/main/extra'
            }
        }

        test {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
        }
    }

    configurations {
        apiCompile.extendsFrom compile
        testCompile.extendsFrom apiCompile
    }

    /* configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'net.minecraftforge' && details.requested.name == 'eventbus') {


                    details.useTarget group: 'net.minecraftforge', name: 'eventbus', version: '0.6.+'
                }
            }
        }
    } */

    task devJar(type: Jar) {
        from sourceSets.api.output
        from sourceSets.main.output

        classifier = 'dev'
    }

    task apiJar(type: Jar) {
        from sourceSets.api.output
        from sourceSets.api.java

        from processApiResources.outputs

        classifier = 'api'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.api.java
        from sourceSets.main.java

        from processApiResources.outputs
        from processResources.outputs

        classifier = 'sources'
    }

    artifacts {
        archives devJar
        archives apiJar
        archives sourcesJar
    }
}

// Process all resources _AFTER_ processing original projects so versions are set
allprojects {
    processResources {
        def vars = rootProject.config.toMap()

        allprojects.each { project ->
            vars[project.name]['version'] = project.version
        }

        inputs.properties vars

        from(sourceSets.main.resources.srcDirs) {
            include 'META-INF/mods.toml'
            include 'pack.mcmeta'

            expand vars
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude 'META-INF/mods.toml'
            exclude 'pack.mcmeta'
        }
    }

    processTestResources {
        def vars = rootProject.config.toMap()

        allprojects.each { project ->
            vars[project.name]['version'] = project.version
        }

        inputs.properties vars

        from(sourceSets.test.resources.srcDirs) {
            include 'META-INF/mods.toml'
            include 'pack.mcmeta'

            expand vars
        }

        from(sourceSets.test.resources.srcDirs) {
            exclude 'META-INF/mods.toml'
            exclude 'pack.mcmeta'
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += 'src/main/extra'
        }
    }
}

minecraft {
    runs {
        client {
            ideaModule "${project.group}.${project.name}.main"
            workingDirectory project.file('run').canonicalPath

            mods {
                ExampleModLib {
                    sources sourceSets.api, sourceSets.main
                }
            }
        }

        clientAllMods {
            parent runs.client

            project.subprojects.forEach { subProject ->
                child subProject.path, 'client'
            }
        }

        testClient {
            parent runs.client

            ideaModule "${project.group}.${project.name}.test"

            mods {
                ExampleModLibTest {
                    sources sourceSets.test
                }
            }
        }

        testClientAllMods {
            parent runs.testClient

            child runs.clientAllMods
        }

        server {
            ideaModule "${project.group}.${project.name}.main"
            workingDirectory project.file('run').canonicalPath

            arg 'nogui'

            mods {
                ExampleModLib {
                    sources sourceSets.api, sourceSets.main
                }
            }
        }

        serverAllMods {
            parent runs.server

            project.subprojects.forEach { subProject ->
                child subProject.path, 'server'
            }
        }

        testServer {
            parent runs.server

            ideaModule "${project.group}.${project.name}.test"

            mods {
                ExampleModLibTest {
                    sources sourceSets.test
                }
            }
        }

        testServerAllMods {
            parent runs.testServer

            child runs.serverAllMods
        }
    }
}

subprojects {
    minecraft {
        runs {
            client {
                parent rootProject.path, 'client'

                ideaModule "${project.group}.${project.name}.main"

                workingDirectory project.file('run').canonicalPath

                mods {
                    "${project.name}" {
                        sources sourceSets.api, sourceSets.main
                    }
                }
            }

            testClient {
                parent runs.client

                ideaModule "${project.group}.${project.name}.test"

                mods {
                    "${project.name}Test" {
                        sources sourceSets.test
                    }
                }
            }

            server {
                parent rootProject.path, 'server'

                ideaModule "${project.group}.${project.name}.main"

                workingDirectory project.file('run').canonicalPath

                mods {
                    "${project.name}" {
                        sources sourceSets.api, sourceSets.main
                    }
                }
            }

            testServer {
                parent runs.server

                ideaModule "${project.group}.${project.name}.test"

                mods {
                    "${project.name}Test" {
                        sources sourceSets.test
                    }
                }
            }
        }
    }

    dependencies {
        compile rootProject
        compile rootProject.sourceSets.api.output
    }
}

license {
    header = rootProject.file('HEADER')

    ext {
        name = 'ForgeOCEP'
        year = Calendar.getInstance().get(Calendar.YEAR)
        fullname = 'Forge Overly Complicated Example Project'
    }

    include '**/*.java'

    tasks {
        subProjects {
            files = project.files(project.subprojects*.sourceSets*.collect { sourceSet ->
                sourceSet.allJava
            }.flatten())
        }
    }
}
